{"version":3,"sources":["../../../libs/common/src/common.module.ts","../../../libs/common/src/common.service.ts","../../../libs/common/src/guards/auth.guard.ts","../../../libs/common/src/enums/roles.enum.ts","../../../libs/common/src/decorators/public.decorator.ts","../../../libs/common/src/guards/role.guard.ts","../../../libs/common/src/decorators/roles.decorator.ts","../../../libs/common/src/pipes/parse-object-id.pipe.ts","../../../libs/common/src/utils/user.util.ts"],"sourcesContent":["import { Module } from '@nestjs/common';\nimport { CommonService } from './common.service';\nimport { APP_GUARD } from '@nestjs/core';\nimport { AuthGuard, RoleGuard } from './guards';\n\n@Module({\n  providers: [\n    CommonService,\n    { provide: APP_GUARD, useClass: AuthGuard },\n    { provide: APP_GUARD, useClass: RoleGuard },\n  ],\n  exports: [CommonService],\n})\nexport class CommonModule {}\n","import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class CommonService {}\n","import {\n  type CanActivate,\n  type ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Reflector } from '@nestjs/core';\nimport { JwtService } from '@nestjs/jwt';\nimport type { Request } from 'express';\nimport { RolesEnum } from '../enums/roles.enum';\nimport { IS_PUBLIC } from '../decorators/public.decorator';\nimport type { CustomRequest } from '../interfaces/custom-request.interface';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor(\n    private configService: ConfigService,\n    private jwtService: JwtService,\n    private reflector: Reflector,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise<boolean> {\n    const isPublic = this.reflector.getAllAndOverride<boolean>(IS_PUBLIC, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    if (isPublic) {\n      return true;\n    }\n\n    const req: CustomRequest = context.switchToHttp().getRequest();\n    const token = this.extractTokenFromHeader(req);\n\n    if (!token) {\n      throw new UnauthorizedException();\n    }\n\n    try {\n      const payload = await this.jwtService.verifyAsync<{\n        sub: string;\n        username: string;\n        role: RolesEnum;\n      }>(token, { secret: this.configService.get('JWT_SECRET') });\n      req['user'] = payload;\n    } catch {\n      throw new UnauthorizedException();\n    }\n\n    return true;\n  }\n\n  private extractTokenFromHeader(request: Request) {\n    const [type, token] = request.headers.authorization?.split(' ') ?? [];\n\n    return type === 'Bearer' && token;\n  }\n}\n","export enum RolesEnum {\n  ADMIN = 'admin',\n  VENDOR = 'vendor',\n  CUSTOMER = 'customer',\n  EXECUTIVE = 'executive',\n}\n","import { SetMetadata } from '@nestjs/common';\n\nexport const IS_PUBLIC = 'isPublic';\n/**\n * Decorator that marks a route as public, disabling authentication checks.\n */\nexport const Public = () => SetMetadata(IS_PUBLIC, true);\n","import {\n  type CanActivate,\n  type ExecutionContext,\n  Injectable,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Observable } from 'rxjs';\nimport { RolesEnum } from '../enums/roles.enum';\nimport type { CustomRequest } from '../interfaces/custom-request.interface';\nimport { ROLES_KEY } from '../decorators/roles.decorator';\n\n@Injectable()\nexport class RoleGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise<boolean> | Observable<boolean> {\n    const allowedRoles = this.reflector.getAllAndOverride<RolesEnum[]>(\n      ROLES_KEY,\n      [context.getHandler(), context.getClass()],\n    );\n    const user = context.switchToHttp().getRequest<CustomRequest>().user;\n\n    if (!allowedRoles || !user) {\n      return true;\n    }\n\n    return allowedRoles.includes(user.role);\n  }\n}\n","import { SetMetadata } from '@nestjs/common';\nimport { RolesEnum } from '../enums/roles.enum';\n\nexport const ROLES_KEY = 'roles';\n/**\n * Decorator to set roles that can access to the decorated controller/action.\n * Use in combination with the RolesGuard to restrict access to certain roles.\n * @param roles - One or multiple roles that can access to the decorated controller/action.\n * @see {@link https://docs.nestjs.com/security/authorization#roles-based-authorization|NestJS - Roles-based authorization}\n */\nexport const Roles = (...roles: RolesEnum[]) => SetMetadata(ROLES_KEY, roles);\n","import {\n  BadRequestException,\n  Injectable,\n  type PipeTransform,\n} from '@nestjs/common';\nimport { isValidObjectId, Types } from 'mongoose';\n\n@Injectable()\nexport class ParseObjectIdPipe implements PipeTransform {\n  transform(value: string) {\n    if (!isValidObjectId(value)) {\n      throw new BadRequestException('Invalid ObjectId');\n    }\n\n    return Types.ObjectId.createFromHexString(value);\n  }\n}\n","import crypto from 'crypto';\n\nexport class UserUtil {\n  public static hashPassword(password: string) {\n    const salt = crypto.randomBytes(32).toString('hex');\n    const hash = crypto\n      .pbkdf2Sync(password, salt, 1000, 64, 'sha512')\n      .toString('hex');\n\n    return [hash, salt];\n  }\n\n  public static comparePassword(password: string, hash: string, salt: string) {\n    const hashedPassword = crypto\n      .pbkdf2Sync(password, salt, 1000, 64, 'sha512')\n      .toString('hex');\n\n    return hashedPassword === hash;\n  }\n}\n"],"mappings":"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","names":["Injectable","RolesEnum","Injectable","Injectable","SetMetadata","SetMetadata","Injectable","Injectable","Injectable"]}