{"version":3,"sources":["../../../libs/common/src/modules/common/common.module.ts","../../../libs/common/src/modules/common/common.service.ts","../../../libs/common/src/guards/auth.guard.ts","../../../libs/common/src/decorators/public.decorator.ts","../../../libs/common/src/guards/role.guard.ts","../../../libs/common/src/decorators/roles.decorator.ts","../../../libs/common/src/modules/jwt/shared-jwt.module.ts","../../../libs/common/src/constants/index.ts","../../../libs/common/src/modules/kafka/kafka.module.ts","../../../libs/common/src/modules/kafka/kafka.service.ts","../../../libs/common/src/enums/roles.enum.ts","../../../libs/common/src/pipes/parse-object-id.pipe.ts","../../../libs/common/src/utils/user.util.ts","../../../libs/common/src/dto/id-and-timestamp.dto.ts"],"sourcesContent":["import { Module } from '@nestjs/common';\nimport { CommonService } from './common.service';\nimport { APP_GUARD, Reflector } from '@nestjs/core';\nimport { AuthGuard, RoleGuard } from '../../guards';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { SharedJwtModule } from '../jwt';\n\n@Module({\n  imports: [SharedJwtModule],\n  providers: [\n    CommonService,\n    {\n      provide: APP_GUARD,\n      useFactory: () =>\n        new AuthGuard(new ConfigService(), new JwtService(), new Reflector()),\n    },\n    { provide: APP_GUARD, useFactory: () => new RoleGuard(new Reflector()) },\n  ],\n  exports: [CommonService],\n})\nexport class CommonModule {}\n","import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class CommonService {}\n","import {\n  type CanActivate,\n  type ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Reflector } from '@nestjs/core';\nimport { JwtService } from '@nestjs/jwt';\nimport type { Request } from 'express';\nimport { RolesEnum } from '../enums/roles.enum';\nimport { IS_PUBLIC } from '../decorators/public.decorator';\nimport type { CustomRequest } from '../interfaces/custom-request.interface';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor(\n    private configService: ConfigService,\n    private jwtService: JwtService,\n    private reflector: Reflector,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise<boolean> {\n    const isPublic = this.reflector.getAllAndOverride<boolean>(IS_PUBLIC, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    if (isPublic) {\n      return true;\n    }\n\n    const req: CustomRequest = context.switchToHttp().getRequest();\n    const token = this.extractTokenFromHeader(req);\n\n    if (!token) {\n      throw new UnauthorizedException();\n    }\n\n    try {\n      const payload = await this.jwtService.verifyAsync<{\n        sub: string;\n        username: string;\n        role: RolesEnum;\n      }>(token, { secret: this.configService.get('JWT_SECRET') });\n      req['user'] = payload;\n    } catch {\n      throw new UnauthorizedException();\n    }\n\n    return true;\n  }\n\n  private extractTokenFromHeader(request: Request) {\n    const [type, token] = request.headers.authorization?.split(' ') ?? [];\n\n    return type === 'Bearer' && token;\n  }\n}\n","import { SetMetadata } from '@nestjs/common';\n\nexport const IS_PUBLIC = 'isPublic';\n/**\n * Decorator that marks a route as public, disabling authentication checks.\n */\nexport const Public = () => SetMetadata(IS_PUBLIC, true);\n","import {\n  type CanActivate,\n  type ExecutionContext,\n  Injectable,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Observable } from 'rxjs';\nimport { RolesEnum } from '../enums/roles.enum';\nimport type { CustomRequest } from '../interfaces/custom-request.interface';\nimport { ROLES_KEY } from '../decorators/roles.decorator';\n\n@Injectable()\nexport class RoleGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise<boolean> | Observable<boolean> {\n    const allowedRoles = this.reflector.getAllAndOverride<RolesEnum[]>(\n      ROLES_KEY,\n      [context.getHandler(), context.getClass()],\n    );\n    const user = context.switchToHttp().getRequest<CustomRequest>().user;\n\n    if (!allowedRoles || !user) {\n      return true;\n    }\n\n    return allowedRoles.includes(user.role);\n  }\n}\n","import { SetMetadata } from '@nestjs/common';\nimport { RolesEnum } from '../enums/roles.enum';\n\nexport const ROLES_KEY = 'roles';\n/**\n * Decorator to set roles that can access to the decorated controller/action.\n * Use in combination with the RolesGuard to restrict access to certain roles.\n * @param roles - One or multiple roles that can access to the decorated controller/action.\n * @see {@link https://docs.nestjs.com/security/authorization#roles-based-authorization|NestJS - Roles-based authorization}\n */\nexport const Roles = (...roles: RolesEnum[]) => SetMetadata(ROLES_KEY, roles);\n","import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\n\n@Module({\n  imports: [\n    JwtModule.registerAsync({\n      global: true,\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        global: true,\n        secret: configService.get('JWT_SECRET'),\n        signOptions: {\n          expiresIn: '30m',\n        },\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n  exports: [JwtModule],\n})\nexport class SharedJwtModule {}\n","export const TOPICS = {\n  USER: {\n    CREATED: 'user.created',\n    UPDATED: 'user.updated',\n    DELETED: 'user.deleted',\n  },\n} as const;\nexport const KAFKA_SERVICE_TOKEN = 'KAFKA_SERVICE' as const;\n","import { KAFKA_SERVICE_TOKEN } from '@app/common/constants';\nimport { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { ClientsModule, Transport } from '@nestjs/microservices';\nimport { KafkaService } from './kafka.service';\n\n@Module({\n  imports: [\n    ClientsModule.registerAsync([\n      {\n        imports: [ConfigModule],\n        name: KAFKA_SERVICE_TOKEN,\n        useFactory: (configService: ConfigService) => ({\n          transport: Transport.KAFKA,\n          options: {\n            client: {\n              clientId: configService.get('KAFKA_CLIENT_ID'),\n              brokers: [configService.get('KAFKA_BROKER') || 'localhost:9092'],\n            },\n          },\n        }),\n        inject: [ConfigService],\n      },\n    ]),\n  ],\n  providers: [KafkaService],\n  exports: [ClientsModule, KafkaService],\n})\nexport class KafkaModule {}\n","import { KAFKA_SERVICE_TOKEN, TOPICS } from '@app/common/constants';\nimport type { CustomKafkaMessage } from '@app/common/interfaces';\nimport { Inject, Injectable, Logger } from '@nestjs/common';\nimport type { ClientKafka } from '@nestjs/microservices';\n\n@Injectable()\nexport class KafkaService {\n  private readonly logger = new Logger(KafkaService.name);\n\n  constructor(\n    @Inject(KAFKA_SERVICE_TOKEN) private readonly kafkaClient: ClientKafka,\n  ) {}\n\n  emit<T = any>(\n    topic: (typeof TOPICS)[keyof typeof TOPICS][keyof (typeof TOPICS)[keyof typeof TOPICS]],\n    message: CustomKafkaMessage<T>,\n  ) {\n    this.kafkaClient.emit(topic, message).subscribe({\n      next: () => {\n        this.logger.log(`Event published to kafka topic ${topic}`);\n      },\n      error: (err) => {\n        this.logger.error(\n          `Error publishing event to kafka topic ${topic}: ${err}`,\n        );\n      },\n    });\n  }\n}\n","export enum RolesEnum {\n  ADMIN = 'admin',\n  VENDOR = 'vendor',\n  CUSTOMER = 'customer',\n  EXECUTIVE = 'executive',\n}\n","import {\n  BadRequestException,\n  Injectable,\n  type PipeTransform,\n} from '@nestjs/common';\nimport { isValidObjectId, Types } from 'mongoose';\n\n@Injectable()\nexport class ParseObjectIdPipe implements PipeTransform {\n  transform(value: string) {\n    if (!isValidObjectId(value)) {\n      throw new BadRequestException('Invalid ObjectId');\n    }\n\n    return Types.ObjectId.createFromHexString(value);\n  }\n}\n","import crypto from 'crypto';\n\nexport class UserUtil {\n  public static hashPassword(password: string) {\n    const salt = crypto.randomBytes(32).toString('hex');\n    const hash = crypto\n      .pbkdf2Sync(password, salt, 1000, 64, 'sha512')\n      .toString('hex');\n\n    return [hash, salt];\n  }\n\n  public static comparePassword(password: string, hash: string, salt: string) {\n    const hashedPassword = crypto\n      .pbkdf2Sync(password, salt, 1000, 64, 'sha512')\n      .toString('hex');\n\n    return hashedPassword === hash;\n  }\n}\n","import { ApiProperty } from '@nestjs/swagger';\n\nexport class IdAndTimestampDto {\n  @ApiProperty()\n  _id: string;\n\n  @ApiProperty()\n  createdAt: string;\n\n  @ApiProperty()\n  updatedAt: string;\n}\n"],"mappings":"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","names":["Module","Injectable","CommonService","APP_GUARD","Reflector","Injectable","UnauthorizedException","ConfigService","Reflector","JwtService","SetMetadata","IS_PUBLIC","Public","SetMetadata","AuthGuard","constructor","configService","jwtService","reflector","canActivate","context","isPublic","getAllAndOverride","IS_PUBLIC","getHandler","getClass","req","switchToHttp","getRequest","token","extractTokenFromHeader","UnauthorizedException","payload","verifyAsync","secret","get","request","type","headers","authorization","split","Injectable","Reflector","SetMetadata","ROLES_KEY","Roles","roles","SetMetadata","RoleGuard","constructor","reflector","canActivate","context","allowedRoles","getAllAndOverride","ROLES_KEY","getHandler","getClass","user","switchToHttp","getRequest","includes","role","ConfigService","JwtService","Module","ConfigModule","ConfigService","JwtModule","SharedJwtModule","imports","JwtModule","registerAsync","global","ConfigModule","useFactory","configService","secret","get","signOptions","expiresIn","inject","ConfigService","exports","CommonModule","imports","SharedJwtModule","providers","CommonService","provide","APP_GUARD","useFactory","AuthGuard","ConfigService","JwtService","Reflector","RoleGuard","exports","TOPICS","USER","CREATED","UPDATED","DELETED","KAFKA_SERVICE_TOKEN","Module","ConfigModule","ConfigService","ClientsModule","Transport","Inject","Injectable","Logger","KafkaService","logger","constructor","kafkaClient","Logger","name","emit","topic","message","subscribe","next","log","error","err","KafkaModule","imports","ClientsModule","registerAsync","ConfigModule","name","KAFKA_SERVICE_TOKEN","useFactory","configService","transport","Transport","KAFKA","options","client","clientId","get","brokers","inject","ConfigService","providers","KafkaService","exports","RolesEnum","BadRequestException","Injectable","isValidObjectId","Types","ParseObjectIdPipe","transform","value","isValidObjectId","BadRequestException","Types","ObjectId","createFromHexString","crypto","UserUtil","hashPassword","password","salt","crypto","randomBytes","toString","hash","pbkdf2Sync","comparePassword","hashedPassword","ApiProperty","IdAndTimestampDto","_id","createdAt","updatedAt"]}