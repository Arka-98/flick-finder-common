{"version":3,"sources":["../../../libs/common/src/index.ts","../../../libs/common/src/modules/common/common.module.ts","../../../libs/common/src/modules/common/common.service.ts","../../../libs/common/src/guards/auth.guard.ts","../../../libs/common/src/enums/roles.enum.ts","../../../libs/common/src/decorators/public.decorator.ts","../../../libs/common/src/guards/role.guard.ts","../../../libs/common/src/decorators/roles.decorator.ts","../../../libs/common/src/modules/jwt/shared-jwt.module.ts","../../../libs/common/src/constants/index.ts","../../../libs/common/src/modules/kafka/kafka.module.ts","../../../libs/common/src/modules/kafka/kafka.service.ts","../../../libs/common/src/pipes/parse-object-id.pipe.ts","../../../libs/common/src/utils/user.util.ts"],"sourcesContent":["export * from './modules';\nexport * from './decorators';\nexport * from './enums';\nexport * from './interfaces';\nexport * from './pipes';\nexport * from './utils';\nexport * from './constants';\n","import { Module } from '@nestjs/common';\nimport { CommonService } from './common.service';\nimport { APP_GUARD, Reflector } from '@nestjs/core';\nimport { AuthGuard, RoleGuard } from '../../guards';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { SharedJwtModule } from '../jwt';\n\n@Module({\n  imports: [SharedJwtModule],\n  providers: [\n    CommonService,\n    {\n      provide: APP_GUARD,\n      useFactory: () =>\n        new AuthGuard(new ConfigService(), new JwtService(), new Reflector()),\n    },\n    { provide: APP_GUARD, useFactory: () => new RoleGuard(new Reflector()) },\n  ],\n  exports: [CommonService],\n})\nexport class CommonModule {}\n","import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class CommonService {}\n","import {\n  type CanActivate,\n  type ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Reflector } from '@nestjs/core';\nimport { JwtService } from '@nestjs/jwt';\nimport type { Request } from 'express';\nimport { RolesEnum } from '../enums/roles.enum';\nimport { IS_PUBLIC } from '../decorators/public.decorator';\nimport type { CustomRequest } from '../interfaces/custom-request.interface';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor(\n    private configService: ConfigService,\n    private jwtService: JwtService,\n    private reflector: Reflector,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise<boolean> {\n    const isPublic = this.reflector.getAllAndOverride<boolean>(IS_PUBLIC, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    if (isPublic) {\n      return true;\n    }\n\n    const req: CustomRequest = context.switchToHttp().getRequest();\n    const token = this.extractTokenFromHeader(req);\n\n    if (!token) {\n      throw new UnauthorizedException();\n    }\n\n    try {\n      const payload = await this.jwtService.verifyAsync<{\n        sub: string;\n        username: string;\n        role: RolesEnum;\n      }>(token, { secret: this.configService.get('JWT_SECRET') });\n      req['user'] = payload;\n    } catch {\n      throw new UnauthorizedException();\n    }\n\n    return true;\n  }\n\n  private extractTokenFromHeader(request: Request) {\n    const [type, token] = request.headers.authorization?.split(' ') ?? [];\n\n    return type === 'Bearer' && token;\n  }\n}\n","export enum RolesEnum {\n  ADMIN = 'admin',\n  VENDOR = 'vendor',\n  CUSTOMER = 'customer',\n  EXECUTIVE = 'executive',\n}\n","import { SetMetadata } from '@nestjs/common';\n\nexport const IS_PUBLIC = 'isPublic';\n/**\n * Decorator that marks a route as public, disabling authentication checks.\n */\nexport const Public = () => SetMetadata(IS_PUBLIC, true);\n","import {\n  type CanActivate,\n  type ExecutionContext,\n  Injectable,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Observable } from 'rxjs';\nimport { RolesEnum } from '../enums/roles.enum';\nimport type { CustomRequest } from '../interfaces/custom-request.interface';\nimport { ROLES_KEY } from '../decorators/roles.decorator';\n\n@Injectable()\nexport class RoleGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise<boolean> | Observable<boolean> {\n    const allowedRoles = this.reflector.getAllAndOverride<RolesEnum[]>(\n      ROLES_KEY,\n      [context.getHandler(), context.getClass()],\n    );\n    const user = context.switchToHttp().getRequest<CustomRequest>().user;\n\n    if (!allowedRoles || !user) {\n      return true;\n    }\n\n    return allowedRoles.includes(user.role);\n  }\n}\n","import { SetMetadata } from '@nestjs/common';\nimport { RolesEnum } from '../enums/roles.enum';\n\nexport const ROLES_KEY = 'roles';\n/**\n * Decorator to set roles that can access to the decorated controller/action.\n * Use in combination with the RolesGuard to restrict access to certain roles.\n * @param roles - One or multiple roles that can access to the decorated controller/action.\n * @see {@link https://docs.nestjs.com/security/authorization#roles-based-authorization|NestJS - Roles-based authorization}\n */\nexport const Roles = (...roles: RolesEnum[]) => SetMetadata(ROLES_KEY, roles);\n","import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\n\n@Module({\n  imports: [\n    JwtModule.registerAsync({\n      global: true,\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        global: true,\n        secret: configService.get('JWT_SECRET'),\n        signOptions: {\n          expiresIn: '30m',\n        },\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n  exports: [JwtModule],\n})\nexport class SharedJwtModule {}\n","export const TOPICS = {\n  USER: {\n    CREATED: 'user.created',\n    UPDATED: 'user.updated',\n    DELETED: 'user.deleted',\n  },\n} as const;\nexport const KAFKA_SERVICE_TOKEN = 'KAFKA_SERVICE' as const;\n","import { KAFKA_SERVICE_TOKEN } from '@app/common/constants';\nimport { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { ClientsModule, Transport } from '@nestjs/microservices';\nimport { KafkaService } from './kafka.service';\n\n@Module({\n  imports: [\n    ClientsModule.registerAsync([\n      {\n        imports: [ConfigModule],\n        name: KAFKA_SERVICE_TOKEN,\n        useFactory: async (configService: ConfigService) => ({\n          transport: Transport.KAFKA,\n          options: {\n            client: {\n              clientId: configService.get('KAFKA_CLIENT_ID'),\n              brokers: [configService.get('KAFKA_BROKER') || 'localhost:9092'],\n            },\n          },\n        }),\n        inject: [ConfigService],\n      },\n    ]),\n  ],\n  providers: [KafkaService],\n  exports: [ClientsModule, KafkaService],\n})\nexport class KafkaModule {}\n","import { KAFKA_SERVICE_TOKEN, TOPICS } from '@app/common/constants';\nimport { Inject, Injectable, Logger } from '@nestjs/common';\nimport type { ClientKafka } from '@nestjs/microservices';\nimport type { KafkaMessage } from 'kafkajs';\n\n@Injectable()\nexport class KafkaService {\n  private readonly logger = new Logger(KafkaService.name);\n\n  constructor(\n    @Inject(KAFKA_SERVICE_TOKEN) private readonly kafkaClient: ClientKafka,\n  ) {}\n\n  emit(\n    topic: (typeof TOPICS)[keyof typeof TOPICS][keyof (typeof TOPICS)[keyof typeof TOPICS]],\n    message: KafkaMessage,\n  ) {\n    this.kafkaClient.emit(topic, message).subscribe({\n      next: () => {\n        this.logger.log(`Event published to kafka topic ${topic}`);\n      },\n      error: (err) => {\n        this.logger.error(\n          `Error publishing event to kafka topic ${topic}: ${err}`,\n        );\n      },\n    });\n  }\n}\n","import {\n  BadRequestException,\n  Injectable,\n  type PipeTransform,\n} from '@nestjs/common';\nimport { isValidObjectId, Types } from 'mongoose';\n\n@Injectable()\nexport class ParseObjectIdPipe implements PipeTransform {\n  transform(value: string) {\n    if (!isValidObjectId(value)) {\n      throw new BadRequestException('Invalid ObjectId');\n    }\n\n    return Types.ObjectId.createFromHexString(value);\n  }\n}\n","import crypto from 'crypto';\n\nexport class UserUtil {\n  public static hashPassword(password: string) {\n    const salt = crypto.randomBytes(32).toString('hex');\n    const hash = crypto\n      .pbkdf2Sync(password, salt, 1000, 64, 'sha512')\n      .toString('hex');\n\n    return [hash, salt];\n  }\n\n  public static comparePassword(password: string, hash: string, salt: string) {\n    const hashedPassword = crypto\n      .pbkdf2Sync(password, salt, 1000, 64, 'sha512')\n      .toString('hex');\n\n    return hashedPassword === hash;\n  }\n}\n"],"mappings":"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","names":["import_common","import_core","import_common","RolesEnum","import_common","import_common","import_core","import_common","import_config","import_jwt","import_common","import_config","import_jwt","import_common","import_config","import_common","import_common","crypto"]}